plugins {
    id 'com.android.library'
}

project.group = 'com.chalkdigital'
project.version = '2.1.9'

android {
    compileSdk 34
    useLibrary 'org.apache.http.legacy'

    buildFeatures {
        buildConfig = true
    }

    publishing {
        singleVariant('release') {
        }
    }

    defaultConfig {
        aarMetadata {
            minCompileSdk = 26
        }
        targetSdk 34
        minSdk 26
        multiDexEnabled true
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/resources']
//            aidl.srcDirs = ['src/main']
//            renderscript.srcDirs = ['src/main']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    testOptions {
        unitTests {
            // This causes android platform methods from the test JAR
            // to return null, false, etc instead of throwing an exception.
            // We should periodically disable this and tackle the broken tests
            // as it exposes when we are hitting platform APIs in our tests.
            // If these tests *require* platform APIs we may want to make them
            // connected tests instead.
            returnDefaultValues = true

            // Test JVM settings since we have a lot of classes loaded.
            all {
                jvmArgs '-XX:MaxMetaspaceSize=4096m', '-Xmx8192m', '-noverify'
                forkEvery 200
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    project(':cdads').file('proguard-rules.pro')
        }

        debug {
            minifyEnabled false
        }
    }
    namespace 'com.chalkdigital'
    lint {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Note: You will also need a local.properties file to set the location of the SDK in the same
    // way that the existing SDK requires, using the sdk.dir property.
    // Alternatively, you can set an environment variable called ANDROID_HOME. There is no
    // difference between the two methods, you can use the one you prefer.
}



dependencies {
    api 'androidx.appcompat:appcompat:1.7.0'
    api 'androidx.recyclerview:recyclerview:1.3.2'
    api 'com.squareup.retrofit2:retrofit:2.11.0'
    api 'com.squareup.retrofit2:converter-gson:2.11.0'
    api 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.11.0'
    api 'com.google.code.gson:gson:2.11.0'
    api 'com.google.android.gms:play-services-location:21.3.0'
    api 'com.squareup.okhttp3:okhttp:4.12.0'
    api 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    api 'com.google.android.gms:play-services-ads-identifier:18.1.0'
    api 'com.android.support:support-annotations:28.0.0'
    api 'androidx.recyclerview:recyclerview:1.3.2'
    api 'androidx.media3:media3-exoplayer:1.4.0'
    api 'androidx.media3:media3-exoplayer-dash:1.4.0'
    api 'androidx.media3:media3-ui:1.4.0'
    api 'androidx.core:core:1.13.1'
    api 'androidx.core:core-ktx:1.13.1'
    api "androidx.preference:preference-ktx:1.2.1"
//    implementation 'com.google.firebase:firebase-core:16.0.4'
    testImplementation 'junit:junit:4.13.2'
//    implementation files('/Users/arungupta/Workspace/android-SDK-v2/CDAdsSample-Mraid/volley.jar')
//    implementation files('/Users/arungupta/Workspace/android-SDK-v2/CDAdsSample-Mraid/org.eclipse.paho.android.service-1.1.1.jar')
//    implementation files('/Users/arungupta/Workspace/android-SDK-v2/CDAdsSample-Mraid/org.eclipse.paho.client.mqttv3-1.1.1.jar')
}

// 4. Add This Java Blocs:
java {
    toolchain {
        implementation = JvmImplementation.J9
    }
}


java {
    sourceCompatibility = JavaVersion.VERSION_17            // << --- ADD This
    targetCompatibility = JavaVersion.VERSION_17
}

ext {
    PUBLISH_GROUP_ID = 'com.chalkdigital'
    PUBLISH_VERSION = '2.1.9'
    PUBLISH_ARTIFACT_ID = 'cdads'
    PUBLISH_DESCRIPTION = 'Chalk Digital Ads SDK for Android '
    PUBLISH_URL = 'https://github.com/chalkdigital/cdads'
    PUBLISH_LICENSE_NAME = 'Apache License'
    PUBLISH_LICENSE_URL =
            'https://github.com/chalkdigital/cdads/blob/master/LICENSE'
    PUBLISH_DEVELOPER_ID = 'chalkdigital'
    PUBLISH_DEVELOPER_NAME = 'Arun Gupta'
    PUBLISH_DEVELOPER_EMAIL = 'rnd@chalkdigital.com'
    PUBLISH_SCM_CONNECTION =
            'scm:git:github.com/chalkdigital/cdads.git'
    PUBLISH_SCM_DEVELOPER_CONNECTION =
            'scm:git:ssh://github.com/chalkdigital/cdads.git'
    PUBLISH_SCM_URL =
            'https://github.com/chalkdigital/cdads/tree/master'
}

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"



// 5. Publishing:
//publishing {
//    publications {
//        release(MavenPublication) {
//            groupId = 'com.chalkdigital'
//            artifactId = 'cdads'
//            version = "2.1.8"
////            pom {
////                description = 'Chalk Digital Ads SDK for Android'
////            }
//
//            afterEvaluate {
//                from components.release
//                println("Components: " + components*.name)
//            }
//        }
//    }
//}
//
//    repositories {
//        maven {
//            name = "myrepo"
//            url = uri(layout.buildDirectory.dir("repo"))
//        }
//    }
//    repositories {               // << --- ADD This
//        mavenLocal()
//    }
//}
//tasks.register('generateRepo', Zip) {
//    def publishTask = tasks.named('publishReleasePublicationToMyrepoRepository')
//    from publishTask.map { it.getRepository().getUrl() }
//    into 'mylibrary'
//    archiveFileName.set('mylibrary.zip')
//}
